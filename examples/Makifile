# -*-Shell-script-*-
#
# $ maki [role]             [task]
# $ maki [role] [namespace]:[task]
#

export LANG=C
export LC_ALL=C

# set

repository=https://github.com/hansode/makistrano.git
deploy_to=${HOME}/apps/makistrano
branch=master

ssh() { local host=$1; shift; $(which ssh) -t -q ${host} $@; }

# role

role_test() {
  nodes() { echo localhost; }
  ssh() { echo ssh $@; }
}

role_solo() {
  nodes() { echo localhost; }
  ssh() { shift; [[ $# == 0 ]] && { eval $SHELL </dev/stdin; } || { eval $@; }; }
}

role_empty() {
  nodes() { echo; }
}

role_development() {
  nodes() { curl http://example.com/deploy-servers/development; }
}

role_staging() {
  nodes() { curl http://example.com/deploy-servers/staging; }
}

role_production() {
  nodes() { curl http://example.com/deploy-servers/production; }
}

# namespace:task

namespace_test() {
  task_shell() {
    local host=$1; shift

    # local
    eval $*
    # remote
    ssh ${host} $*
  }

  task_whoami() {
    local host=$1; shift

    # local
    whoami
    # remote
    ssh ${host} whoami
  }

  task_uptime() {
    local host=$1; shift

    # local
    uptime
    # remote
    ssh ${host} uptime
  }
}

namespace_deploy() {
  task_setup() {
    local host=$1; shift

    ssh ${host} <<-EOS
	[[ -d ${deploy_to} ]] && {
	  echo "[WARN] already exists: ${deploy_to}"
	} || {
	  git clone ${repository} ${deploy_to}
	  cd ${deploy_to}
	  git checkout ${branch}
	}
	EOS
  }

  task_update() {
    local host=$1; shift

    ssh ${host} <<-EOS
	[[ -d ${deploy_to} ]] && {
	  cd ${deploy_to}; pwd
	  git fetch origin
	  git checkout ${branch}
	  git submodule update --init
	} || {
	  echo "[WARN] directory not found: ${deploy_to}"
	}
	EOS
  }
}

namespace_server() {
  task_start() {
    local host=$1; shift
  }

  task_stop() {
    local host=$1; shift
  }

  task_restart() {
    local host=$1; shift
  }

  task_status() {
    local host=$1; shift
  }
}

# task

task_whoami() {
  local host=$1; shift

  whoami
  ssh ${host} whoami
}

task_date() {
  local host=$1; shift

  date
  ssh ${host} date
}
